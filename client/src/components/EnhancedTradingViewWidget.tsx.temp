import React, { useRef, useEffect, useState, forwardRef, useImperativeHandle, Ref, ForwardRefRenderFunction } from 'react';
import { useTranslation } from 'react-i18next';

// Define TradingView study typings
interface TradingViewStudy {
  name: string;
  forceOverlay?: boolean;
  lock?: boolean;
  inputs?: any[];
  overrides?: Record<string, any>;
  options?: Record<string, any>;
}

// Define the type for the ref
export interface TradingViewRef {
  refreshWidget: () => void;
  widget: any;
  getCurrentPrice: () => number;
  addIndicator: (indicator: string) => void;
  removeIndicator: (indicator: string) => void;
  getSelectedIndicators: () => string[];
}

// Advanced TradingView Widget options interface
export interface AdvancedTradingViewWidgetProps {
  symbol?: string;
  interval?: string;
  timezone?: string;
  theme?: 'light' | 'dark';
  width?: string | number;
  height?: string | number;
  locale?: string;
  toolbar_bg?: string;
  enable_publishing?: boolean;
  withdateranges?: boolean;
  hide_side_toolbar?: boolean;
  allow_symbol_change?: boolean;
  save_image?: boolean;
  show_popup_button?: boolean;
  popup_width?: string | number;
  popup_height?: string | number;
  container_id?: string;
  studies?: string[];
  autosize?: boolean;
  hide_top_toolbar?: boolean;
  details?: boolean;
  hotlist?: boolean;
  calendar?: boolean;
  news?: string[];
  alerts?: boolean;
  hide_legend?: boolean;
  drawing_access?: {
    access?: 'all' | 'group',
    tools?: {
      items?: string[]
    }
  };
  studies_access?: {
    type?: 'all' | 'default',
    tools?: {
      items?: string[]
    }
  };
  disabled_features?: string[];
  enabled_features?: string[];
  savedDrawings?: boolean;
  savedCharts?: boolean;
  fullscreen?: boolean;
  charts_storage_url?: string;
  charts_storage_api_version?: string;
  client_id?: string;
  user_id?: string;
  indicators_file_name?: string;
  loading_screen?: { backgroundColor?: string, foregroundColor?: string };
  custom_css_url?: string;
  favorites?: { intervals?: string[], chartTypes?: string[], studies?: string[] };
  study_count_limit?: number;
  symbol_search_request_delay?: number;
  compare_symbols?: { symbol: string, title: string }[];
  show_interval_dialog_on_key_press?: boolean;
  supported_resolutions?: string[];
  preset?: string;
  session?: string;
  style?: string;
  debug?: boolean;
  chartType?: string;
  onPriceUpdate?: (price: number) => void;
  customIndicators?: {
    id: string,
    src: string,
    description: string,
    metainfo: {
      _metainfoVersion: number,
      id: string,
      description: string,
      shortDescription: string,
      format: {
        type: string,
        precision: number,
      },
      defaults: any,
      inputs: any[],
    }
  }[];
}

const EnhancedTradingViewWidgetComponent: ForwardRefRenderFunction<
  TradingViewRef,
  AdvancedTradingViewWidgetProps
> = (
  {
    symbol = 'BINANCE:BTCUSDT',
    interval = '1D',
    timezone = 'Etc/UTC',
    theme = 'dark',
    width = '100%',
    height = '500',
    locale = 'en',
    toolbar_bg = '#f1f3f6',
    enable_publishing = false,
    withdateranges = true, 
    hide_side_toolbar = true,
    allow_symbol_change = true,
    save_image = true,
    show_popup_button = false,
    popup_width = '1000',
    popup_height = '650',
    container_id = 'tradingview_widget',
    studies = [],
    autosize = false,
    hide_top_toolbar = false,
    details = false,
    hotlist = false,
    calendar = false,
    news = [],
    alerts = true,
    hide_legend = false,
    drawing_access,
    studies_access,
    disabled_features = [],
    enabled_features = [],
    savedDrawings = true,
    savedCharts = true,
    fullscreen = false,
    charts_storage_url,
    charts_storage_api_version = '1.1',
    client_id,
    user_id,
    indicators_file_name,
    loading_screen,
    custom_css_url,
    favorites,
    study_count_limit = 30,
    symbol_search_request_delay = 500,
    compare_symbols = [],
    show_interval_dialog_on_key_press = true,
    supported_resolutions = ['1', '5', '15', '30', '60', '240', 'D', 'W', 'M'],
    preset,
    session,
    style,
    debug = false,
    chartType,
    onPriceUpdate,
    customIndicators = [],
  },
  ref
) => {
  const { i18n } = useTranslation();
  const container = useRef<HTMLDivElement>(null);
  const scriptRef = useRef<HTMLScriptElement | null>(null);
  const widgetRef = useRef<any>(null);
  const [currentPrice, setCurrentPrice] = useState<number>(0);
  
  // Track selected indicators
  const [selectedIndicators, setSelectedIndicators] = useState<string[]>([]);
